// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AGLStakingAddressChanged extends ethereum.Event {
  get params(): AGLStakingAddressChanged__Params {
    return new AGLStakingAddressChanged__Params(this);
  }
}

export class AGLStakingAddressChanged__Params {
  _event: AGLStakingAddressChanged;

  constructor(event: AGLStakingAddressChanged) {
    this._event = event;
  }

  get _AGLStakingAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BaseRateUpdated extends ethereum.Event {
  get params(): BaseRateUpdated__Params {
    return new BaseRateUpdated__Params(this);
  }
}

export class BaseRateUpdated__Params {
  _event: BaseRateUpdated;

  constructor(event: BaseRateUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _baseRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BorrowerOperationsAddressChanged extends ethereum.Event {
  get params(): BorrowerOperationsAddressChanged__Params {
    return new BorrowerOperationsAddressChanged__Params(this);
  }
}

export class BorrowerOperationsAddressChanged__Params {
  _event: BorrowerOperationsAddressChanged;

  constructor(event: BorrowerOperationsAddressChanged) {
    this._event = event;
  }

  get _newBorrowerOperationsAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollSurplusPoolAddressChanged extends ethereum.Event {
  get params(): CollSurplusPoolAddressChanged__Params {
    return new CollSurplusPoolAddressChanged__Params(this);
  }
}

export class CollSurplusPoolAddressChanged__Params {
  _event: CollSurplusPoolAddressChanged;

  constructor(event: CollSurplusPoolAddressChanged) {
    this._event = event;
  }

  get _collSurplusPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GasPoolAddressChanged extends ethereum.Event {
  get params(): GasPoolAddressChanged__Params {
    return new GasPoolAddressChanged__Params(this);
  }
}

export class GasPoolAddressChanged__Params {
  _event: GasPoolAddressChanged;

  constructor(event: GasPoolAddressChanged) {
    this._event = event;
  }

  get _gasPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LTermsUpdated extends ethereum.Event {
  get params(): LTermsUpdated__Params {
    return new LTermsUpdated__Params(this);
  }
}

export class LTermsUpdated__Params {
  _event: LTermsUpdated;

  constructor(event: LTermsUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _L_USDADebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LastFeeOpTimeUpdated extends ethereum.Event {
  get params(): LastFeeOpTimeUpdated__Params {
    return new LastFeeOpTimeUpdated__Params(this);
  }
}

export class LastFeeOpTimeUpdated__Params {
  _event: LastFeeOpTimeUpdated;

  constructor(event: LastFeeOpTimeUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _lastFeeOpTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _liquidatedDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _liquidatedColl(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _collGasCompensation(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _USDAGasCompensation(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _attemptedAGLmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _actualAGLmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _AssetSent(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _AssetFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SortedTrovesAddressChanged extends ethereum.Event {
  get params(): SortedTrovesAddressChanged__Params {
    return new SortedTrovesAddressChanged__Params(this);
  }
}

export class SortedTrovesAddressChanged__Params {
  _event: SortedTrovesAddressChanged;

  constructor(event: SortedTrovesAddressChanged) {
    this._event = event;
  }

  get _sortedTrovesAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StabilityPoolManagerAddressChanged extends ethereum.Event {
  get params(): StabilityPoolManagerAddressChanged__Params {
    return new StabilityPoolManagerAddressChanged__Params(this);
  }
}

export class StabilityPoolManagerAddressChanged__Params {
  _event: StabilityPoolManagerAddressChanged;

  constructor(event: StabilityPoolManagerAddressChanged) {
    this._event = event;
  }

  get _stabilityPoolManagerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SystemSnapshotsUpdated extends ethereum.Event {
  get params(): SystemSnapshotsUpdated__Params {
    return new SystemSnapshotsUpdated__Params(this);
  }
}

export class SystemSnapshotsUpdated__Params {
  _event: SystemSnapshotsUpdated;

  constructor(event: SystemSnapshotsUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _totalStakesSnapshot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _totalCollateralSnapshot(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SystemUnpaidInterestUpdated extends ethereum.Event {
  get params(): SystemUnpaidInterestUpdated__Params {
    return new SystemUnpaidInterestUpdated__Params(this);
  }
}

export class SystemUnpaidInterestUpdated__Params {
  _event: SystemUnpaidInterestUpdated;

  constructor(event: SystemUnpaidInterestUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unpaidInterest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalStakesUpdated extends ethereum.Event {
  get params(): TotalStakesUpdated__Params {
    return new TotalStakesUpdated__Params(this);
  }
}

export class TotalStakesUpdated__Params {
  _event: TotalStakesUpdated;

  constructor(event: TotalStakesUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newTotalStakes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveIndexUpdated extends ethereum.Event {
  get params(): TroveIndexUpdated__Params {
    return new TroveIndexUpdated__Params(this);
  }
}

export class TroveIndexUpdated__Params {
  _event: TroveIndexUpdated;

  constructor(event: TroveIndexUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _newIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TroveLiquidated extends ethereum.Event {
  get params(): TroveLiquidated__Params {
    return new TroveLiquidated__Params(this);
  }
}

export class TroveLiquidated__Params {
  _event: TroveLiquidated;

  constructor(event: TroveLiquidated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _operation(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class TroveSnapshotsUpdated extends ethereum.Event {
  get params(): TroveSnapshotsUpdated__Params {
    return new TroveSnapshotsUpdated__Params(this);
  }
}

export class TroveSnapshotsUpdated__Params {
  _event: TroveSnapshotsUpdated;

  constructor(event: TroveSnapshotsUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _L_USDADebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TroveUpdated extends ethereum.Event {
  get params(): TroveUpdated__Params {
    return new TroveUpdated__Params(this);
  }
}

export class TroveUpdated__Params {
  _event: TroveUpdated;

  constructor(event: TroveUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _stake(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _operation(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class USDATokenAddressChanged extends ethereum.Event {
  get params(): USDATokenAddressChanged__Params {
    return new USDATokenAddressChanged__Params(this);
  }
}

export class USDATokenAddressChanged__Params {
  _event: USDATokenAddressChanged;

  constructor(event: USDATokenAddressChanged) {
    this._event = event;
  }

  get _USDATokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VaultParametersBaseChanged extends ethereum.Event {
  get params(): VaultParametersBaseChanged__Params {
    return new VaultParametersBaseChanged__Params(this);
  }
}

export class VaultParametersBaseChanged__Params {
  _event: VaultParametersBaseChanged;

  constructor(event: VaultParametersBaseChanged) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VaultUnpaidInterestUpdated extends ethereum.Event {
  get params(): VaultUnpaidInterestUpdated__Params {
    return new VaultUnpaidInterestUpdated__Params(this);
  }
}

export class VaultUnpaidInterestUpdated__Params {
  _event: VaultUnpaidInterestUpdated;

  constructor(event: VaultUnpaidInterestUpdated) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get unpaidInterest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TroveManager__TrovesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getAsset(): Address {
    return this.value0;
  }

  getDebt(): BigInt {
    return this.value1;
  }

  getColl(): BigInt {
    return this.value2;
  }

  getStake(): BigInt {
    return this.value3;
  }

  getStatus(): i32 {
    return this.value4;
  }

  getArrayIndex(): BigInt {
    return this.value5;
  }
}

export class TroveManager__getEntireDebtAndCollResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getDebt(): BigInt {
    return this.value0;
  }

  getColl(): BigInt {
    return this.value1;
  }

  getPendingUSDADebtReward(): BigInt {
    return this.value2;
  }

  getPendingAssetReward(): BigInt {
    return this.value3;
  }
}

export class TroveManager__rewardSnapshotsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAsset(): BigInt {
    return this.value0;
  }

  getUSDADebt(): BigInt {
    return this.value1;
  }
}

export class TroveManager extends ethereum.SmartContract {
  static bind(address: Address): TroveManager {
    return new TroveManager("TroveManager", address);
  }

  BETA(): BigInt {
    let result = super.call("BETA", "BETA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BETA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BETA", "BETA():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DECIMAL_PRECISION(): BigInt {
    let result = super.call(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DECIMAL_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ETH_REF_ADDRESS(): Address {
    let result = super.call(
      "ETH_REF_ADDRESS",
      "ETH_REF_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ETH_REF_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ETH_REF_ADDRESS",
      "ETH_REF_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  L_ASSETS(param0: Address): BigInt {
    let result = super.call("L_ASSETS", "L_ASSETS(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_L_ASSETS(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("L_ASSETS", "L_ASSETS(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  L_USDADebts(param0: Address): BigInt {
    let result = super.call("L_USDADebts", "L_USDADebts(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_L_USDADebts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "L_USDADebts",
      "L_USDADebts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINUTE_DECAY_FACTOR(): BigInt {
    let result = super.call(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINUTE_DECAY_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  SECONDS_IN_ONE_MINUTE(): BigInt {
    let result = super.call(
      "SECONDS_IN_ONE_MINUTE",
      "SECONDS_IN_ONE_MINUTE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SECONDS_IN_ONE_MINUTE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SECONDS_IN_ONE_MINUTE",
      "SECONDS_IN_ONE_MINUTE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TroveOwners(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "TroveOwners",
      "TroveOwners(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_TroveOwners(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TroveOwners",
      "TroveOwners(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Troves(param0: Address, param1: Address): TroveManager__TrovesResult {
    let result = super.call(
      "Troves",
      "Troves(address,address):(address,uint256,uint256,uint256,uint8,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new TroveManager__TrovesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt()
    );
  }

  try_Troves(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<TroveManager__TrovesResult> {
    let result = super.tryCall(
      "Troves",
      "Troves(address,address):(address,uint256,uint256,uint256,uint8,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__TrovesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt()
      )
    );
  }

  addTroveOwnerToArray(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_addTroveOwnerToArray(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aglParams(): Address {
    let result = super.call("aglParams", "aglParams():(address)", []);

    return result[0].toAddress();
  }

  try_aglParams(): ethereum.CallResult<Address> {
    let result = super.tryCall("aglParams", "aglParams():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aglStaking(): Address {
    let result = super.call("aglStaking", "aglStaking():(address)", []);

    return result[0].toAddress();
  }

  try_aglStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("aglStaking", "aglStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseRate(param0: Address): BigInt {
    let result = super.call("baseRate", "baseRate(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_baseRate(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseRate", "baseRate(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowerOperationsAddress(): Address {
    let result = super.call(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_borrowerOperationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkRecoveryMode(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "checkRecoveryMode",
      "checkRecoveryMode(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkRecoveryMode(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRecoveryMode",
      "checkRecoveryMode(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseTroveColl(
    _asset: Address,
    _borrower: Address,
    _collDecrease: BigInt
  ): BigInt {
    let result = super.call(
      "decreaseTroveColl",
      "decreaseTroveColl(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collDecrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseTroveColl(
    _asset: Address,
    _borrower: Address,
    _collDecrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseTroveColl",
      "decreaseTroveColl(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collDecrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseTroveDebt(
    _asset: Address,
    _borrower: Address,
    _debtDecrease: BigInt
  ): BigInt {
    let result = super.call(
      "decreaseTroveDebt",
      "decreaseTroveDebt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtDecrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseTroveDebt(
    _asset: Address,
    _borrower: Address,
    _debtDecrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseTroveDebt",
      "decreaseTroveDebt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtDecrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingFee(_asset: Address, _USDADebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFee",
      "getBorrowingFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_USDADebt)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFee(
    _asset: Address,
    _USDADebt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFee",
      "getBorrowingFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_USDADebt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingFeeWithDecay(_asset: Address, _USDADebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_USDADebt)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFeeWithDecay(
    _asset: Address,
    _USDADebt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_USDADebt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRate(_asset: Address): BigInt {
    let result = super.call(
      "getBorrowingRate",
      "getBorrowingRate(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRate(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRate",
      "getBorrowingRate(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRateWithDecay(_asset: Address): BigInt {
    let result = super.call(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRateWithDecay(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentICR(_asset: Address, _borrower: Address, _price: BigInt): BigInt {
    let result = super.call(
      "getCurrentICR",
      "getCurrentICR(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentICR(
    _asset: Address,
    _borrower: Address,
    _price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentICR",
      "getCurrentICR(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireDebtAndColl(
    _asset: Address,
    _borrower: Address
  ): TroveManager__getEntireDebtAndCollResult {
    let result = super.call(
      "getEntireDebtAndColl",
      "getEntireDebtAndColl(address,address):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return new TroveManager__getEntireDebtAndCollResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getEntireDebtAndColl(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getEntireDebtAndCollResult> {
    let result = super.tryCall(
      "getEntireDebtAndColl",
      "getEntireDebtAndColl(address,address):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getEntireDebtAndCollResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getEntireSystemColl(_asset: Address): BigInt {
    let result = super.call(
      "getEntireSystemColl",
      "getEntireSystemColl(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemColl(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemColl",
      "getEntireSystemColl(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemDebt(_asset: Address): BigInt {
    let result = super.call(
      "getEntireSystemDebt",
      "getEntireSystemDebt(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemDebt(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemDebt",
      "getEntireSystemDebt(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNominalICR(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getNominalICR",
      "getNominalICR(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNominalICR(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNominalICR",
      "getNominalICR(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingAssetReward(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getPendingAssetReward",
      "getPendingAssetReward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPendingAssetReward(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingAssetReward",
      "getPendingAssetReward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingUSDADebtReward(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getPendingUSDADebtReward",
      "getPendingUSDADebtReward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPendingUSDADebtReward(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingUSDADebtReward",
      "getPendingUSDADebtReward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionFee(_asset: Address, _assetDraw: BigInt): BigInt {
    let result = super.call(
      "getRedemptionFee",
      "getRedemptionFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_assetDraw)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionFee(
    _asset: Address,
    _assetDraw: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionFee",
      "getRedemptionFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_assetDraw)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionFeeWithDecay(_asset: Address, _assetDraw: BigInt): BigInt {
    let result = super.call(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_assetDraw)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionFeeWithDecay(
    _asset: Address,
    _assetDraw: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_assetDraw)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRate(_asset: Address): BigInt {
    let result = super.call(
      "getRedemptionRate",
      "getRedemptionRate(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRate(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRate",
      "getRedemptionRate(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRateWithDecay(_asset: Address): BigInt {
    let result = super.call(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRateWithDecay(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSystemTotalUnpaidInterest(_asset: Address): BigInt {
    let result = super.call(
      "getSystemTotalUnpaidInterest",
      "getSystemTotalUnpaidInterest(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getSystemTotalUnpaidInterest(
    _asset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSystemTotalUnpaidInterest",
      "getSystemTotalUnpaidInterest(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTCR(_asset: Address, _price: BigInt): BigInt {
    let result = super.call("getTCR", "getTCR(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_asset),
      ethereum.Value.fromUnsignedBigInt(_price)
    ]);

    return result[0].toBigInt();
  }

  try_getTCR(_asset: Address, _price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTCR", "getTCR(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_asset),
      ethereum.Value.fromUnsignedBigInt(_price)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveColl(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getTroveColl",
      "getTroveColl(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTroveColl(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveColl",
      "getTroveColl(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveDebt(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getTroveDebt",
      "getTroveDebt(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTroveDebt(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveDebt",
      "getTroveDebt(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveFromTroveOwnersArray(_asset: Address, _index: BigInt): Address {
    let result = super.call(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toAddress();
  }

  try_getTroveFromTroveOwnersArray(
    _asset: Address,
    _index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTroveOwnersCount(_asset: Address): BigInt {
    let result = super.call(
      "getTroveOwnersCount",
      "getTroveOwnersCount(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getTroveOwnersCount(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveOwnersCount",
      "getTroveOwnersCount(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStake(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getTroveStake",
      "getTroveStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTroveStake(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStake",
      "getTroveStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStatus(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "getTroveStatus",
      "getTroveStatus(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTroveStatus(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStatus",
      "getTroveStatus(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnpaidInterestOfUser(_asset: Address, _user: Address): BigInt {
    let result = super.call(
      "getUnpaidInterestOfUser",
      "getUnpaidInterestOfUser(address,address):(uint256)",
      [ethereum.Value.fromAddress(_asset), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUnpaidInterestOfUser(
    _asset: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnpaidInterestOfUser",
      "getUnpaidInterestOfUser(address,address):(uint256)",
      [ethereum.Value.fromAddress(_asset), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPendingRewards(_asset: Address, _borrower: Address): boolean {
    let result = super.call(
      "hasPendingRewards",
      "hasPendingRewards(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasPendingRewards(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPendingRewards",
      "hasPendingRewards(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseTroveColl(
    _asset: Address,
    _borrower: Address,
    _collIncrease: BigInt
  ): BigInt {
    let result = super.call(
      "increaseTroveColl",
      "increaseTroveColl(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseTroveColl(
    _asset: Address,
    _borrower: Address,
    _collIncrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseTroveColl",
      "increaseTroveColl(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseTroveDebt(
    _asset: Address,
    _borrower: Address,
    _debtIncrease: BigInt
  ): BigInt {
    let result = super.call(
      "increaseTroveDebt",
      "increaseTroveDebt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseTroveDebt(
    _asset: Address,
    _borrower: Address,
    _debtIncrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseTroveDebt",
      "increaseTroveDebt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestManager(): Address {
    let result = super.call(
      "interestManager",
      "interestManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_interestManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestManager",
      "interestManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRedemptionWhitelisted(): boolean {
    let result = super.call(
      "isRedemptionWhitelisted",
      "isRedemptionWhitelisted():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isRedemptionWhitelisted(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRedemptionWhitelisted",
      "isRedemptionWhitelisted():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastETHError_Redistribution(param0: Address): BigInt {
    let result = super.call(
      "lastETHError_Redistribution",
      "lastETHError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastETHError_Redistribution(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastETHError_Redistribution",
      "lastETHError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFeeOperationTime(param0: Address): BigInt {
    let result = super.call(
      "lastFeeOperationTime",
      "lastFeeOperationTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastFeeOperationTime(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFeeOperationTime",
      "lastFeeOperationTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUSDADebtError_Redistribution(param0: Address): BigInt {
    let result = super.call(
      "lastUSDADebtError_Redistribution",
      "lastUSDADebtError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastUSDADebtError_Redistribution(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUSDADebtError_Redistribution",
      "lastUSDADebtError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nitroSafeguard(): boolean {
    let result = super.call("nitroSafeguard", "nitroSafeguard():(bool)", []);

    return result[0].toBoolean();
  }

  try_nitroSafeguard(): ethereum.CallResult<boolean> {
    let result = super.tryCall("nitroSafeguard", "nitroSafeguard():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redemptionDisabled(param0: Address): boolean {
    let result = super.call(
      "redemptionDisabled",
      "redemptionDisabled(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_redemptionDisabled(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "redemptionDisabled",
      "redemptionDisabled(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redemptor(): Address {
    let result = super.call("redemptor", "redemptor():(address)", []);

    return result[0].toAddress();
  }

  try_redemptor(): ethereum.CallResult<Address> {
    let result = super.tryCall("redemptor", "redemptor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardSnapshots(
    param0: Address,
    param1: Address
  ): TroveManager__rewardSnapshotsResult {
    let result = super.call(
      "rewardSnapshots",
      "rewardSnapshots(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new TroveManager__rewardSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rewardSnapshots(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<TroveManager__rewardSnapshotsResult> {
    let result = super.tryCall(
      "rewardSnapshots",
      "rewardSnapshots(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__rewardSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  savingModuleStabilityPool(): Address {
    let result = super.call(
      "savingModuleStabilityPool",
      "savingModuleStabilityPool():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_savingModuleStabilityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "savingModuleStabilityPool",
      "savingModuleStabilityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sortedTroves(): Address {
    let result = super.call("sortedTroves", "sortedTroves():(address)", []);

    return result[0].toAddress();
  }

  try_sortedTroves(): ethereum.CallResult<Address> {
    let result = super.tryCall("sortedTroves", "sortedTroves():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stabilityPoolManager(): Address {
    let result = super.call(
      "stabilityPoolManager",
      "stabilityPoolManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stabilityPoolManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityPoolManager",
      "stabilityPoolManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalCollateralSnapshot(param0: Address): BigInt {
    let result = super.call(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalCollateralSnapshot(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakes(param0: Address): BigInt {
    let result = super.call("totalStakes", "totalStakes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalStakes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakes",
      "totalStakes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakesSnapshot(param0: Address): BigInt {
    let result = super.call(
      "totalStakesSnapshot",
      "totalStakesSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalStakesSnapshot(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakesSnapshot",
      "totalStakesSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateBaseRateFromRedemption(
    _asset: Address,
    _ETHDrawn: BigInt,
    _price: BigInt,
    _totalUSDASupply: BigInt
  ): BigInt {
    let result = super.call(
      "updateBaseRateFromRedemption",
      "updateBaseRateFromRedemption(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_ETHDrawn),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_totalUSDASupply)
      ]
    );

    return result[0].toBigInt();
  }

  try_updateBaseRateFromRedemption(
    _asset: Address,
    _ETHDrawn: BigInt,
    _price: BigInt,
    _totalUSDASupply: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateBaseRateFromRedemption",
      "updateBaseRateFromRedemption(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromUnsignedBigInt(_ETHDrawn),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_totalUSDASupply)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateStakeAndTotalStakes(_asset: Address, _borrower: Address): BigInt {
    let result = super.call(
      "updateStakeAndTotalStakes",
      "updateStakeAndTotalStakes(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_updateStakeAndTotalStakes(
    _asset: Address,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateStakeAndTotalStakes",
      "updateStakeAndTotalStakes(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdaToken(): Address {
    let result = super.call("usdaToken", "usdaToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdaToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdaToken", "usdaToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddTroveOwnerToArrayCall extends ethereum.Call {
  get inputs(): AddTroveOwnerToArrayCall__Inputs {
    return new AddTroveOwnerToArrayCall__Inputs(this);
  }

  get outputs(): AddTroveOwnerToArrayCall__Outputs {
    return new AddTroveOwnerToArrayCall__Outputs(this);
  }
}

export class AddTroveOwnerToArrayCall__Inputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddTroveOwnerToArrayCall__Outputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApplyPendingRewardsCall extends ethereum.Call {
  get inputs(): ApplyPendingRewardsCall__Inputs {
    return new ApplyPendingRewardsCall__Inputs(this);
  }

  get outputs(): ApplyPendingRewardsCall__Outputs {
    return new ApplyPendingRewardsCall__Outputs(this);
  }
}

export class ApplyPendingRewardsCall__Inputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApplyPendingRewardsCall__Outputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }
}

export class BatchLiquidateTrovesCall extends ethereum.Call {
  get inputs(): BatchLiquidateTrovesCall__Inputs {
    return new BatchLiquidateTrovesCall__Inputs(this);
  }

  get outputs(): BatchLiquidateTrovesCall__Outputs {
    return new BatchLiquidateTrovesCall__Outputs(this);
  }
}

export class BatchLiquidateTrovesCall__Inputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _troveArray(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class BatchLiquidateTrovesCall__Outputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }
}

export class CloseTroveCall extends ethereum.Call {
  get inputs(): CloseTroveCall__Inputs {
    return new CloseTroveCall__Inputs(this);
  }

  get outputs(): CloseTroveCall__Outputs {
    return new CloseTroveCall__Outputs(this);
  }
}

export class CloseTroveCall__Inputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseTroveCall__Outputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }
}

export class CloseTroveByRedemptorCall extends ethereum.Call {
  get inputs(): CloseTroveByRedemptorCall__Inputs {
    return new CloseTroveByRedemptorCall__Inputs(this);
  }

  get outputs(): CloseTroveByRedemptorCall__Outputs {
    return new CloseTroveByRedemptorCall__Outputs(this);
  }
}

export class CloseTroveByRedemptorCall__Inputs {
  _call: CloseTroveByRedemptorCall;

  constructor(call: CloseTroveByRedemptorCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseTroveByRedemptorCall__Outputs {
  _call: CloseTroveByRedemptorCall;

  constructor(call: CloseTroveByRedemptorCall) {
    this._call = call;
  }
}

export class DecayBaseRateFromBorrowingCall extends ethereum.Call {
  get inputs(): DecayBaseRateFromBorrowingCall__Inputs {
    return new DecayBaseRateFromBorrowingCall__Inputs(this);
  }

  get outputs(): DecayBaseRateFromBorrowingCall__Outputs {
    return new DecayBaseRateFromBorrowingCall__Outputs(this);
  }
}

export class DecayBaseRateFromBorrowingCall__Inputs {
  _call: DecayBaseRateFromBorrowingCall;

  constructor(call: DecayBaseRateFromBorrowingCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DecayBaseRateFromBorrowingCall__Outputs {
  _call: DecayBaseRateFromBorrowingCall;

  constructor(call: DecayBaseRateFromBorrowingCall) {
    this._call = call;
  }
}

export class DecreaseTroveCollCall extends ethereum.Call {
  get inputs(): DecreaseTroveCollCall__Inputs {
    return new DecreaseTroveCollCall__Inputs(this);
  }

  get outputs(): DecreaseTroveCollCall__Outputs {
    return new DecreaseTroveCollCall__Outputs(this);
  }
}

export class DecreaseTroveCollCall__Inputs {
  _call: DecreaseTroveCollCall;

  constructor(call: DecreaseTroveCollCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collDecrease(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DecreaseTroveCollCall__Outputs {
  _call: DecreaseTroveCollCall;

  constructor(call: DecreaseTroveCollCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseTroveDebtCall extends ethereum.Call {
  get inputs(): DecreaseTroveDebtCall__Inputs {
    return new DecreaseTroveDebtCall__Inputs(this);
  }

  get outputs(): DecreaseTroveDebtCall__Outputs {
    return new DecreaseTroveDebtCall__Outputs(this);
  }
}

export class DecreaseTroveDebtCall__Inputs {
  _call: DecreaseTroveDebtCall;

  constructor(call: DecreaseTroveDebtCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _debtDecrease(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DecreaseTroveDebtCall__Outputs {
  _call: DecreaseTroveDebtCall;

  constructor(call: DecreaseTroveDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseTroveCollCall extends ethereum.Call {
  get inputs(): IncreaseTroveCollCall__Inputs {
    return new IncreaseTroveCollCall__Inputs(this);
  }

  get outputs(): IncreaseTroveCollCall__Outputs {
    return new IncreaseTroveCollCall__Outputs(this);
  }
}

export class IncreaseTroveCollCall__Inputs {
  _call: IncreaseTroveCollCall;

  constructor(call: IncreaseTroveCollCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collIncrease(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class IncreaseTroveCollCall__Outputs {
  _call: IncreaseTroveCollCall;

  constructor(call: IncreaseTroveCollCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseTroveDebtCall extends ethereum.Call {
  get inputs(): IncreaseTroveDebtCall__Inputs {
    return new IncreaseTroveDebtCall__Inputs(this);
  }

  get outputs(): IncreaseTroveDebtCall__Outputs {
    return new IncreaseTroveDebtCall__Outputs(this);
  }
}

export class IncreaseTroveDebtCall__Inputs {
  _call: IncreaseTroveDebtCall;

  constructor(call: IncreaseTroveDebtCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _debtIncrease(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class IncreaseTroveDebtCall__Outputs {
  _call: IncreaseTroveDebtCall;

  constructor(call: IncreaseTroveDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class LiquidateTrovesCall extends ethereum.Call {
  get inputs(): LiquidateTrovesCall__Inputs {
    return new LiquidateTrovesCall__Inputs(this);
  }

  get outputs(): LiquidateTrovesCall__Outputs {
    return new LiquidateTrovesCall__Outputs(this);
  }
}

export class LiquidateTrovesCall__Inputs {
  _call: LiquidateTrovesCall;

  constructor(call: LiquidateTrovesCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _n(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateTrovesCall__Outputs {
  _call: LiquidateTrovesCall;

  constructor(call: LiquidateTrovesCall) {
    this._call = call;
  }
}

export class RemoveStakeCall extends ethereum.Call {
  get inputs(): RemoveStakeCall__Inputs {
    return new RemoveStakeCall__Inputs(this);
  }

  get outputs(): RemoveStakeCall__Outputs {
    return new RemoveStakeCall__Outputs(this);
  }
}

export class RemoveStakeCall__Inputs {
  _call: RemoveStakeCall;

  constructor(call: RemoveStakeCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveStakeCall__Outputs {
  _call: RemoveStakeCall;

  constructor(call: RemoveStakeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAGLParametersCall extends ethereum.Call {
  get inputs(): SetAGLParametersCall__Inputs {
    return new SetAGLParametersCall__Inputs(this);
  }

  get outputs(): SetAGLParametersCall__Outputs {
    return new SetAGLParametersCall__Outputs(this);
  }
}

export class SetAGLParametersCall__Inputs {
  _call: SetAGLParametersCall;

  constructor(call: SetAGLParametersCall) {
    this._call = call;
  }

  get _vaultParams(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAGLParametersCall__Outputs {
  _call: SetAGLParametersCall;

  constructor(call: SetAGLParametersCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _borrowerOperationsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stabilityPoolManagerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gasPoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collSurplusPoolAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _usdaTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _sortedTrovesAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _aglStakingAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _aglParameters(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetInterestManagerCall extends ethereum.Call {
  get inputs(): SetInterestManagerCall__Inputs {
    return new SetInterestManagerCall__Inputs(this);
  }

  get outputs(): SetInterestManagerCall__Outputs {
    return new SetInterestManagerCall__Outputs(this);
  }
}

export class SetInterestManagerCall__Inputs {
  _call: SetInterestManagerCall;

  constructor(call: SetInterestManagerCall) {
    this._call = call;
  }

  get _interestManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInterestManagerCall__Outputs {
  _call: SetInterestManagerCall;

  constructor(call: SetInterestManagerCall) {
    this._call = call;
  }
}

export class SetLockSystemCall extends ethereum.Call {
  get inputs(): SetLockSystemCall__Inputs {
    return new SetLockSystemCall__Inputs(this);
  }

  get outputs(): SetLockSystemCall__Outputs {
    return new SetLockSystemCall__Outputs(this);
  }
}

export class SetLockSystemCall__Inputs {
  _call: SetLockSystemCall;

  constructor(call: SetLockSystemCall) {
    this._call = call;
  }

  get _enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetLockSystemCall__Outputs {
  _call: SetLockSystemCall;

  constructor(call: SetLockSystemCall) {
    this._call = call;
  }
}

export class SetRedemptorAddressCall extends ethereum.Call {
  get inputs(): SetRedemptorAddressCall__Inputs {
    return new SetRedemptorAddressCall__Inputs(this);
  }

  get outputs(): SetRedemptorAddressCall__Outputs {
    return new SetRedemptorAddressCall__Outputs(this);
  }
}

export class SetRedemptorAddressCall__Inputs {
  _call: SetRedemptorAddressCall;

  constructor(call: SetRedemptorAddressCall) {
    this._call = call;
  }

  get _redemptorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRedemptorAddressCall__Outputs {
  _call: SetRedemptorAddressCall;

  constructor(call: SetRedemptorAddressCall) {
    this._call = call;
  }
}

export class SetSavingModuleStabilityPoolCall extends ethereum.Call {
  get inputs(): SetSavingModuleStabilityPoolCall__Inputs {
    return new SetSavingModuleStabilityPoolCall__Inputs(this);
  }

  get outputs(): SetSavingModuleStabilityPoolCall__Outputs {
    return new SetSavingModuleStabilityPoolCall__Outputs(this);
  }
}

export class SetSavingModuleStabilityPoolCall__Inputs {
  _call: SetSavingModuleStabilityPoolCall;

  constructor(call: SetSavingModuleStabilityPoolCall) {
    this._call = call;
  }

  get _savingModuleStabilityPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSavingModuleStabilityPoolCall__Outputs {
  _call: SetSavingModuleStabilityPoolCall;

  constructor(call: SetSavingModuleStabilityPoolCall) {
    this._call = call;
  }
}

export class SetTroveCollAndDebtCall extends ethereum.Call {
  get inputs(): SetTroveCollAndDebtCall__Inputs {
    return new SetTroveCollAndDebtCall__Inputs(this);
  }

  get outputs(): SetTroveCollAndDebtCall__Outputs {
    return new SetTroveCollAndDebtCall__Outputs(this);
  }
}

export class SetTroveCollAndDebtCall__Inputs {
  _call: SetTroveCollAndDebtCall;

  constructor(call: SetTroveCollAndDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _newDebt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _newColl(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetTroveCollAndDebtCall__Outputs {
  _call: SetTroveCollAndDebtCall;

  constructor(call: SetTroveCollAndDebtCall) {
    this._call = call;
  }
}

export class SetTroveStatusCall extends ethereum.Call {
  get inputs(): SetTroveStatusCall__Inputs {
    return new SetTroveStatusCall__Inputs(this);
  }

  get outputs(): SetTroveStatusCall__Outputs {
    return new SetTroveStatusCall__Outputs(this);
  }
}

export class SetTroveStatusCall__Inputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _num(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetTroveStatusCall__Outputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBaseRateFromRedemptionCall extends ethereum.Call {
  get inputs(): UpdateBaseRateFromRedemptionCall__Inputs {
    return new UpdateBaseRateFromRedemptionCall__Inputs(this);
  }

  get outputs(): UpdateBaseRateFromRedemptionCall__Outputs {
    return new UpdateBaseRateFromRedemptionCall__Outputs(this);
  }
}

export class UpdateBaseRateFromRedemptionCall__Inputs {
  _call: UpdateBaseRateFromRedemptionCall;

  constructor(call: UpdateBaseRateFromRedemptionCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ETHDrawn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _totalUSDASupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateBaseRateFromRedemptionCall__Outputs {
  _call: UpdateBaseRateFromRedemptionCall;

  constructor(call: UpdateBaseRateFromRedemptionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateStakeAndTotalStakesCall extends ethereum.Call {
  get inputs(): UpdateStakeAndTotalStakesCall__Inputs {
    return new UpdateStakeAndTotalStakesCall__Inputs(this);
  }

  get outputs(): UpdateStakeAndTotalStakesCall__Outputs {
    return new UpdateStakeAndTotalStakesCall__Outputs(this);
  }
}

export class UpdateStakeAndTotalStakesCall__Inputs {
  _call: UpdateStakeAndTotalStakesCall;

  constructor(call: UpdateStakeAndTotalStakesCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateStakeAndTotalStakesCall__Outputs {
  _call: UpdateStakeAndTotalStakesCall;

  constructor(call: UpdateStakeAndTotalStakesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateTroveRewardSnapshotsCall extends ethereum.Call {
  get inputs(): UpdateTroveRewardSnapshotsCall__Inputs {
    return new UpdateTroveRewardSnapshotsCall__Inputs(this);
  }

  get outputs(): UpdateTroveRewardSnapshotsCall__Outputs {
    return new UpdateTroveRewardSnapshotsCall__Outputs(this);
  }
}

export class UpdateTroveRewardSnapshotsCall__Inputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateTroveRewardSnapshotsCall__Outputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }
}
